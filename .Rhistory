if ("waiting_on_next" %in% timestamp_Line_Module_Job$state) {
endTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="waiting_on_next","time"]
} else {
endTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="storing_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
job_id <- 23
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_next" %in% timestamp_Line_Module_Job$state) {
endTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="waiting_on_next","time"]
} else {
endTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="storing_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
startTime
endTime
fetchTime
processingTime <- as.integer(difftime(endTime, startTime, units = "secs"))
processingTime
prepTime
totTime
totTime <- processingTime + 2 * prepTime
totTime
data[job_id,] <- c(job_id, totTime[1])
data
data <- data.frame(job_id=0, time=0)
data
data[job_id,] <- c(job_id, totTime[1])
data
B1 <- getTimes(timestamp_B1)
B1
B1$time
B2 <- getTimes(timestamp_B2)
B2$time
B3 <- getTimes(timestamp_B3)$time
B3
getTimes(timestamp_B3)$time
getTimes(timestamp_D1)$time
getTimes(timestamp_D2)$time
getTimes(timestamp_D3)$time
getTimes(timestamp_D4)$time
getTimes(timestamp_C1)$time
getTimes(timestamp_C2)$time
timestamp_B1 <- timestamp_B[timestamp_B$module == 1,]
timestamp_B2 <- timestamp_B[timestamp_B$module == 2,]
timestamp_B3 <- timestamp_B[timestamp_B$module == 3,]
timestamp_B4 <- timestamp_B[timestamp_B$module == 4,]
timestamp_B5 <- timestamp_B[timestamp_B$module == 5,]
timestamp_B6 <- timestamp_B[timestamp_B$module == 6,]
timestamp_C1 <- timestamp_C[timestamp_C$module == 1,]
timestamp_C2 <- timestamp_C[timestamp_C$module == 2,]
timestamp_C3 <- timestamp_C[timestamp_C$module == 3,]
timestamp_C4 <- timestamp_C[timestamp_C$module == 4,]
timestamp_C5 <- timestamp_C[timestamp_C$module == 5,]
timestamp_C6 <- timestamp_C[timestamp_C$module == 6,]
timestamp_C7 <- timestamp_C[timestamp_C$module == 7,]
timestamp_D1 <- timestamp_D[timestamp_D$module == 1,]
timestamp_D2 <- timestamp_D[timestamp_D$module == 2,]
timestamp_D3 <- timestamp_D[timestamp_D$module == 3,]
timestamp_D4 <- timestamp_D[timestamp_D$module == 4,]
getTimes(timestamp_C1)$time
getTimes(timestamp_C2)$time
getTimes(timestamp_C3)$time
getTimes(timestamp_C4)$time
getTimes(timestamp_C5)$time
getTimes(timestamp_C6)$time
getTimes(timestamp_C7)$time
getTimes(timestamp_C7)$time
getTimes(timestamp_D1)$time
getTimes(timestamp_D2)$time
getTimes(timestamp_D3)$time
getTimes(timestamp_D4)$time
timestamp_C
timestamp_C7 <- timestamp_C[timestamp_C$module == 7,]
timestamp_C7
timestamp_B1 <- timestamp_B1[order(timestamp_B1$time),]
timestamp_B1
getTimes(timestamp_B1)$time
getTimes(timestamp_B2)$time
getTimes(timestamp_B3)$time
getTimes(timestamp_B4)$time
getTimes(timestamp_B5)$time
getTimes(timestamp_B6)$time
timestamp_B6
timestamp_B6 <- timestamp_B6[order(timestamp_B6$time),]
timestamp_B6
getTimesLast(timestamp_B6)$time
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
return(data)
}
getTimesLast(timestamp_B6)$time
getTimes(timestamp_B1)$time
timestamp_D1
getTimes(timestamp_D1)$time
getTimes(timestamp_D3)$time
getTimes(timestamp_D2)$time
getTimes(timestamp_D4)$time
getTimesLast(timestamp_D4)$time
timestamp_D1 <- timestamp_D1[order(timestamp_D1$time),]
timestamp_D1
getTimes(timestamp_D1)$time
getTimes(timestamp_D2)$time
getTimes(timestamp_D3)$time
getTimesLast(timestamp_D4)$time
[5, 7, 4, 3, 6, 8, 2, 1]+65
c(5, 7, 4, 3, 6, 8, 2, 1)+65
getTimes(timestamp_B1)$time
getTimes(timestamp_B2)$time
getTimes(timestamp_B3)$time
getTimes(timestamp_B4)$time
getTimes(timestamp_B5)$time
getTimesLast(timestamp_B6)$time
getTimes(timestamp_B1)$time
getTimes(timestamp_B2)$time
getTimes(timestamp_B3)$time
getTimes(timestamp_B4)$time
getTimes(timestamp_B5)$time
getTimesLast(timestamp_B6)$time
timestamp_B6
timestamp_C1 <- timestamp_C1[order(timestamp_C1$time),]
timestamp_C1
getTimes(timestamp_C1)$time
getTimes(timestamp_C2)$time
getTimes(timestamp_C3)$time
getTimes(timestamp_C4)$time
timestamp_C4
timestamp_C4 <- timestamp_C4[order(timestamp_C4$time),]
timestamp_C4
getTimes(timestamp_C5)$time
getTimes(timestamp_C6)$time
getTimesLast(timestamp_C7)$time
c(4, 2, 15, 11, 5, 8, 9, 26, 16, 17, 14, 25, 13, 10, 12, 23, 18, 20, 6, 24, 21, 7, 22, 19, 1, 3) + 39
c(4, 3, 13, 1, 18, 10, 5, 17, 14, 2, 9, 7, 6, 12, 15, 8, 16, 11)+21
timestamp_C7
timestamp_B6
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
return(data)
}
getTimesLast(timestamp_B6)$time
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
timestamp_Line_Module_Job_next
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(39+1),]
timestamp_Line_Module_Job_next
timestamp_Line_Module_Job_next$state
timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
endTime
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
endTime
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
processingFetchTime
prepTime
totTime <- processingFetchTime + prepTime
totTime
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
return(data)
}
getTimesLast(timestamp_B6)$time
timestamp_B6
timestamp_Line_Module_Job$state
getTimesLast(timestamp_B6)$time
timestamp_Line_Module_Job$state
timestamp_B6
data[max(timestamp_Line_Module$job_id),]
timestamp_Line_Module$state=="idle"
sum(timestamp_Line_Module$state=="idle")
timestamp_Line_Module
timestamp_Line_Module[timestamp_Line_Module$state=="idle"]
timestamp_Line_Module[timestamp_Line_Module$state=="idle",]
timestamp_Line_Module[timestamp_Line_Module$state=="idle","time"]
timestamp_B6
length(timestamp_Line_Module)
ncol(timestamp_Line_Module)
nrow(timestamp_Line_Module)
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"]-timestamp_Line_Module[nrow(timestamp_Line_Module-2),"time"]
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"]
timestamp_Line_Module[nrow(timestamp_Line_Module-2),"time"]
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"]-timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"]
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module),"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"], units = "secs"))
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"], units = "secs"))
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id),
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"], units = "secs")))
return(data)
}
getTimesLast(timestamp_B6)$time
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"], units = "secs"))
timestamp_Line_Module
timestamp_B6 <- timestamp_B6[order(timestamp_B6$time),]
timestamp_B6
getTimesLast(timestamp_B6)$time
timestamp_B6
timestamp_Line_Module
timestamp_Line_Module <- timestamp_B6
timestamp_Line_Module
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"], units = "secs")))
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module),"time"], units = "secs"))
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module),"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"], units = "secs"))
getTimesLast(timestamp_B6)$time
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id),
as.integer(difftime(timestamp_Line_Module[nrow(timestamp_Line_Module),"time"],
timestamp_Line_Module[nrow(timestamp_Line_Module)-2,"time"], units = "secs")))
return(data)
}
getTimesLast(timestamp_B6)$time
getTimesLast(timestamp_C7)$time
timestamp_C7 <- timestamp_C7[order(timestamp_C7$time),]
timestamp_C7
timestamp_Line_Module
max(timestamp_Line_Module$job_id)
timestamp_Line_Module[max(timestamp_Line_Module$job_id),"time"]
timestamp_Line_Module[timestamp_Line_Module$job_id==max(timestamp_Line_Module$job_id),"time"]
timestamp_Line_Module[timestamp_Line_Module$job_id==max(timestamp_Line_Module$job_id),]
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==max(timestamp_Line_Module$job_id),]
lastJob
as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
lastJob
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJobNo <- max(timestamp_Line_Module$job_id)
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==lastJobNo,]
lastJobTime <- as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
data[lastJobNo, ] <- c(lastJobNo, lastJobTime)
return(data)
}
getTimesLast(timestamp_B6)$time
getTimesLast(timestamp_C7)$time
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJobNo <- max(timestamp_Line_Module$job_id)
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==lastJobNo,]
lastJobTime <- as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
print(lastJobTime)
data[lastJobNo, ] <- c(lastJobNo, lastJobTime)
return(data)
}
getTimesLast(timestamp_B6)$time
getTimesLast(timestamp_C7)$time
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJobNo <- max(timestamp_Line_Module$job_id)
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==lastJobNo,]
lastJobTime <- as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
print(lastJobTime)
data[lastJobNo, ] <- c(lastJobNo, lastJobTime[0])
return(data)
}
getTimesLast(timestamp_B6)$time
getTimesLast(timestamp_C7)$time
data[lastJobNo, ]
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJobNo <- max(timestamp_Line_Module$job_id)
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==lastJobNo,]
lastJobTime <- as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
print(lastJobTime)
print(lastJobNo)
data[lastJobNo, ] <- c(lastJobNo, lastJobTime[0])
return(data)
}
getTimesLast(timestamp_B6)$time
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJobNo <- max(timestamp_Line_Module$job_id)
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==lastJobNo,]
lastJobTime <- as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
print(lastJobTime)
print(lastJobNo)
data[lastJobNo, ] <- lastJobTime[0]
return(data)
}
getTimesLast(timestamp_B6)$time
lastJobNo
lastJobNo <- 39
data[lastJobNo, ]
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJobNo <- max(timestamp_Line_Module$job_id)
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==lastJobNo,]
lastJobTime <- as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
print(lastJobTime)
print(lastJobNo)
data[lastJobNo, ] <- c(lastJobNo ,lastJobTime[0])
return(data)
}
getTimesLast(timestamp_B6)$time
timestamp_B6
getTimesLast(timestamp_B6)
getTimesLast <-function(timestamp_Line_Module){
data <- data.frame(job_id=0, time=0)
for (job_id in min(timestamp_Line_Module$job_id):(max(timestamp_Line_Module$job_id)-1)) {
timestamp_Line_Module_Job <- timestamp_Line_Module[timestamp_Line_Module$job_id==job_id,]
timestamp_Line_Module_Job_next <- timestamp_Line_Module[timestamp_Line_Module$job_id==(job_id+1),]
startTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="processing","time"]
if ("waiting_on_precedent" %in% timestamp_Line_Module_Job_next$state) {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="waiting_on_precedent","time"]
} else {
endTime <- timestamp_Line_Module_Job_next[timestamp_Line_Module_Job_next$state=="fetching_job","time"]
}
fetchTime <- timestamp_Line_Module_Job[timestamp_Line_Module_Job$state=="fetching_job","time"]
processingFetchTime <- as.integer(difftime(endTime, startTime, units = "secs"))
prepTime <- as.integer(difftime(startTime, fetchTime, units = "secs"))
totTime <- processingFetchTime + prepTime
data[job_id,] <- c(job_id, totTime[1])
}
#data[max(timestamp_Line_Module$job_id),] <- c(max(timestamp_Line_Module$job_id), as.integer(mean(data$time, na.rm = T)))
lastJobNo <- max(timestamp_Line_Module$job_id)
lastJob <- timestamp_Line_Module[timestamp_Line_Module$job_id==lastJobNo,]
lastJobTime <- as.integer(difftime(lastJob[lastJob$state=="idle", "time"], lastJob[lastJob$state=="fetching_job", "time"], units = "secs"))
print(lastJobTime)
print(lastJobNo)
data[lastJobNo, ] <- c(lastJobNo ,lastJobTime[1])
return(data)
}
getTimesLast(timestamp_B6)$time
getTimesLast(timestamp_B6)
getTimesLast(timestamp_C7)$time
getTimesLast(timestamp_B6)$time
getTimesLast(timestamp_D4)$time
